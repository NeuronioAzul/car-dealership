# Docker Compose para Produção

services:
  # Database com configurações de produção
  mysql:
    image: mysql:8.0
    container_name: car_dealership_mysql_prod
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: car_dealership
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./shared/database/init:/docker-entrypoint-initdb.d
      - ./shared/database/conf:/etc/mysql/conf.d
    networks:
      - car_dealership_network
    secrets:
      - mysql_root_password
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    restart: unless-stopped

  # Message Broker com configurações de produção
  rabbitmq:
    image: rabbitmq:3-management
    container_name: car_dealership_rabbitmq_prod
    environment:
      RABBITMQ_DEFAULT_USER_FILE: /run/secrets/rabbitmq_user
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
      - ./shared/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./shared/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - car_dealership_network
    secrets:
      - rabbitmq_user
      - rabbitmq_password
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      timeout: 30s
      retries: 10
    restart: unless-stopped

  # Microserviços com configurações de produção
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      target: production
    environment:
      APP_ENV: production
      DB_HOST: mysql
      DB_PASSWORD_FILE: /run/secrets/mysql_root_password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PASS_FILE: /run/secrets/rabbitmq_password
      JWT_SECRET_FILE: /run/secrets/jwt_secret
    networks:
      - car_dealership_network
    secrets:
      - mysql_root_password
      - rabbitmq_password
      - jwt_secret
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      - mysql
      - rabbitmq

  # Kong API Gateway para produção
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    ports:
      - "80:8000"
      - "443:8443"
    volumes:
      - ./api-gateway/kong.yml:/kong/declarative/kong.yml
      - ./ssl:/etc/ssl/certs
    networks:
      - car_dealership_network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

secrets:
  mysql_root_password:
    external: true
  rabbitmq_user:
    external: true
  rabbitmq_password:
    external: true
  jwt_secret:
    external: true

volumes:
  mysql_data_prod:
    driver: local
  rabbitmq_data_prod:
    driver: local

networks:
  car_dealership_network:
    driver: overlay
    attachable: true

